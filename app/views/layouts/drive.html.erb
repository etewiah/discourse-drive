<!DOCTYPE html>
<html>
<head>
  <script type="text/javascript">

/**
  We can insert data into the PreloadStore when the document is loaded.
  The data can be accessed once by a key, after which it is removed

  @class PreloadStore
**/
window.PreloadStore = {
  data: {},

  /**
    Store an object in the store

    @method store
    @param {String} key the key to store the object with
    @param {String} value the object we're inserting into the store
  **/
  store: function(key, value) {
    this.data[key] = value;
  },

  /**
    To retrieve a key, you provide the key you want, plus a finder to load
    it if the key cannot be found. Once the key is used once, it is removed
    from the store.
    So, for example, you can't load a preloaded topic more than once.

    @method getAndRemove
    @param {String} key the key to look up the object with
    @param {function} finder a function to find the object with
    @returns {Promise} a promise that will eventually be the object we want.
  **/
  getAndRemove: function(key, finder) {
    if (this.data[key]) {
      var promise = Em.RSVP.resolve(this.data[key]);
      delete this.data[key];
      return promise;
    }

    if (finder) {
      return new Ember.RSVP.Promise(function(resolve, reject) {
        var result = finder();

        // If the finder returns a promise, we support that too
        if (result.then) {
          result.then(function(result) {
            return resolve(result);
          }, function(result) {
            return reject(result);
          });
        } else {
          resolve(result);
        }
      });
    }

    return Ember.RSVP.resolve(null);
  },

  /**
    If we are sure it's preloaded, we don't have to supply a finder.
    Just returns undefined if it's not in the store.

    @method get
    @param {String} key the key to look up the object with
    @returns {Object} the object from the store
  **/
  "get": function(key) {
    return this.data[key];
  },

  /**
    Removes the stored value if the key exists

    @method remove
    @param {String} key the key to remove
  **/
  remove: function(key) {
    if (this.data[key]) delete this.data[key];
  },

  /**
    Resets the contents of the store. Used in testing.

  **/
  reset: function() {
    this.data = {};
  }

};

  </script>

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>Klavado</title>
  <meta name="description" content="Tools for discourse forums">
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <link href='http://fonts.googleapis.com/css?family=Quicksand:300,400' rel='stylesheet' type='text/css'>
  <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,300' rel='stylesheet' type='text/css'>

  <base href="/">

  <%- @discette_css_files.each do |discette_css_file| %>
    <link rel="stylesheet" href="<%= discette_css_file %>">
  <% end %>

  <%- @discette_js_files.each do |discette_js_file| %>
    <script src="<%= discette_js_file %>"></script>
  <% end %>

  <%= csrf_meta_tags %>
</head>
<body>

<%= yield %>

    <% unless current_user %>
      <form id='hidden-login-form' method="post" action="/drive/section/login" style="display: none;">
        <input name="username" type="text"     id="signin_username">
        <input name="password" type="password" id="signin_password">
        <input name="redirect" type="hidden">
        <input type="submit" id="signin-button" value="<%= t 'log_in' %>">
      </form>
    <% end %>

    <%- if @preloaded.present? %>
      <script>
      <%- @preloaded.each do |key, json| %>
        PreloadStore.store("<%= key %>",<%= escape_unicode(json) %>);
      <% end %>
      </script>
    <%- end %>

<!-- data below -->

    <%= yield :data %>

    <%= render_google_analytics_code %>


</body>
</html>
